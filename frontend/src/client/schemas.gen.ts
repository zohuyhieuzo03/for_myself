// This file is auto-generated by @hey-api/openapi-ts

export const AccountCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        type: {
            '$ref': '#/components/schemas/AccountType',
            default: 'cash'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        }
    },
    type: 'object',
    required: ['name'],
    title: 'AccountCreate'
} as const;

export const AccountPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        type: {
            '$ref': '#/components/schemas/AccountType',
            default: 'cash'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'id', 'user_id', 'created_at', 'updated_at'],
    title: 'AccountPublic'
} as const;

export const AccountTypeSchema = {
    type: 'string',
    enum: ['cash', 'bank', 'ewallet', 'investment', 'credit_card', 'other'],
    title: 'AccountType'
} as const;

export const AccountUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                },
                {
                    type: 'null'
                }
            ]
        },
        currency: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 10
                },
                {
                    type: 'null'
                }
            ],
            title: 'Currency'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        }
    },
    type: 'object',
    title: 'AccountUpdate'
} as const;

export const AccountsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AccountPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'AccountsPublic'
} as const;

export const AllocationRuleCreateSchema = {
    properties: {
        grp: {
            '$ref': '#/components/schemas/CategoryGroup'
        },
        percent: {
            type: 'number',
            maximum: 100,
            exclusiveMinimum: 0,
            title: 'Percent'
        },
        sprint_id: {
            type: 'string',
            format: 'uuid',
            title: 'Sprint Id'
        }
    },
    type: 'object',
    required: ['grp', 'percent', 'sprint_id'],
    title: 'AllocationRuleCreate'
} as const;

export const AllocationRulePublicSchema = {
    properties: {
        grp: {
            '$ref': '#/components/schemas/CategoryGroup'
        },
        percent: {
            type: 'number',
            maximum: 100,
            exclusiveMinimum: 0,
            title: 'Percent'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        sprint_id: {
            type: 'string',
            format: 'uuid',
            title: 'Sprint Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['grp', 'percent', 'id', 'user_id', 'sprint_id', 'created_at', 'updated_at'],
    title: 'AllocationRulePublic'
} as const;

export const AllocationRuleUpdateSchema = {
    properties: {
        grp: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CategoryGroup'
                },
                {
                    type: 'null'
                }
            ]
        },
        percent: {
            anyOf: [
                {
                    type: 'number',
                    maximum: 100,
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Percent'
        },
        sprint_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sprint Id'
        }
    },
    type: 'object',
    title: 'AllocationRuleUpdate'
} as const;

export const AllocationRulesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AllocationRulePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'AllocationRulesPublic'
} as const;

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const CategoriesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CategoryPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'CategoriesPublic'
} as const;

export const CategoryCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        grp: {
            '$ref': '#/components/schemas/CategoryGroup'
        },
        is_envelope: {
            type: 'boolean',
            title: 'Is Envelope',
            default: true
        }
    },
    type: 'object',
    required: ['name', 'grp'],
    title: 'CategoryCreate'
} as const;

export const CategoryGroupSchema = {
    type: 'string',
    enum: ['needs', 'wants', 'savings_debt'],
    title: 'CategoryGroup'
} as const;

export const CategoryPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        grp: {
            '$ref': '#/components/schemas/CategoryGroup'
        },
        is_envelope: {
            type: 'boolean',
            title: 'Is Envelope',
            default: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'grp', 'id', 'user_id', 'created_at', 'updated_at'],
    title: 'CategoryPublic'
} as const;

export const CategoryUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        grp: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CategoryGroup'
                },
                {
                    type: 'null'
                }
            ]
        },
        is_envelope: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Envelope'
        }
    },
    type: 'object',
    title: 'CategoryUpdate'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IncomeCreateSchema = {
    properties: {
        received_at: {
            type: 'string',
            format: 'date',
            title: 'Received At'
        },
        source: {
            type: 'string',
            maxLength: 255,
            title: 'Source'
        },
        gross_amount: {
            type: 'number',
            title: 'Gross Amount'
        },
        net_amount: {
            type: 'number',
            title: 'Net Amount'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        sprint_id: {
            type: 'string',
            format: 'uuid',
            title: 'Sprint Id'
        }
    },
    type: 'object',
    required: ['received_at', 'source', 'gross_amount', 'net_amount', 'sprint_id'],
    title: 'IncomeCreate'
} as const;

export const IncomePublicSchema = {
    properties: {
        received_at: {
            type: 'string',
            format: 'date',
            title: 'Received At'
        },
        source: {
            type: 'string',
            maxLength: 255,
            title: 'Source'
        },
        gross_amount: {
            type: 'number',
            title: 'Gross Amount'
        },
        net_amount: {
            type: 'number',
            title: 'Net Amount'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        sprint_id: {
            type: 'string',
            format: 'uuid',
            title: 'Sprint Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['received_at', 'source', 'gross_amount', 'net_amount', 'id', 'user_id', 'sprint_id', 'created_at', 'updated_at'],
    title: 'IncomePublic'
} as const;

export const IncomeUpdateSchema = {
    properties: {
        received_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Received At'
        },
        source: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Source'
        },
        gross_amount: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gross Amount'
        },
        net_amount: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Net Amount'
        },
        currency: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 10
                },
                {
                    type: 'null'
                }
            ],
            title: 'Currency'
        },
        sprint_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sprint Id'
        }
    },
    type: 'object',
    title: 'IncomeUpdate'
} as const;

export const IncomesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/IncomePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'IncomesPublic'
} as const;

export const ItemCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'ItemCreate'
} as const;

export const ItemPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['title', 'id', 'owner_id'],
    title: 'ItemPublic'
} as const;

export const ItemUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        }
    },
    type: 'object',
    title: 'ItemUpdate'
} as const;

export const ItemsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ItemPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ItemsPublic'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const SprintCreateSchema = {
    properties: {
        start_date: {
            type: 'string',
            format: 'date',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date',
            title: 'End Date'
        },
        payday_anchor: {
            type: 'string',
            format: 'date',
            title: 'Payday Anchor'
        },
        is_closed: {
            type: 'boolean',
            title: 'Is Closed',
            default: false
        }
    },
    type: 'object',
    required: ['start_date', 'end_date', 'payday_anchor'],
    title: 'SprintCreate'
} as const;

export const SprintPublicSchema = {
    properties: {
        start_date: {
            type: 'string',
            format: 'date',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date',
            title: 'End Date'
        },
        payday_anchor: {
            type: 'string',
            format: 'date',
            title: 'Payday Anchor'
        },
        is_closed: {
            type: 'boolean',
            title: 'Is Closed',
            default: false
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['start_date', 'end_date', 'payday_anchor', 'id', 'user_id', 'created_at', 'updated_at'],
    title: 'SprintPublic'
} as const;

export const SprintUpdateSchema = {
    properties: {
        start_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Date'
        },
        end_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Date'
        },
        payday_anchor: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Payday Anchor'
        },
        is_closed: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Closed'
        }
    },
    type: 'object',
    title: 'SprintUpdate'
} as const;

export const SprintsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/SprintPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'SprintsPublic'
} as const;

export const TodoCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_completed: {
            type: 'boolean',
            title: 'Is Completed',
            default: false
        }
    },
    type: 'object',
    required: ['title'],
    title: 'TodoCreate'
} as const;

export const TodoPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_completed: {
            type: 'boolean',
            title: 'Is Completed',
            default: false
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['title', 'id', 'owner_id', 'created_at', 'updated_at'],
    title: 'TodoPublic'
} as const;

export const TodoUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_completed: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Completed'
        }
    },
    type: 'object',
    title: 'TodoUpdate'
} as const;

export const TodosPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TodoPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'TodosPublic'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const TransactionCreateSchema = {
    properties: {
        txn_date: {
            type: 'string',
            format: 'date',
            title: 'Txn Date'
        },
        type: {
            '$ref': '#/components/schemas/TxnType'
        },
        amount: {
            type: 'number',
            exclusiveMinimum: 0,
            title: 'Amount'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        merchant: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Merchant'
        },
        note: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        account_id: {
            type: 'string',
            format: 'uuid',
            title: 'Account Id'
        },
        category_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Category Id'
        },
        sprint_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sprint Id'
        }
    },
    type: 'object',
    required: ['txn_date', 'type', 'amount', 'account_id'],
    title: 'TransactionCreate'
} as const;

export const TransactionPublicSchema = {
    properties: {
        txn_date: {
            type: 'string',
            format: 'date',
            title: 'Txn Date'
        },
        type: {
            '$ref': '#/components/schemas/TxnType'
        },
        amount: {
            type: 'number',
            exclusiveMinimum: 0,
            title: 'Amount'
        },
        currency: {
            type: 'string',
            maxLength: 10,
            title: 'Currency',
            default: 'VND'
        },
        merchant: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Merchant'
        },
        note: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        sprint_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sprint Id'
        },
        account_id: {
            type: 'string',
            format: 'uuid',
            title: 'Account Id'
        },
        category_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Category Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['txn_date', 'type', 'amount', 'id', 'user_id', 'sprint_id', 'account_id', 'category_id', 'created_at', 'updated_at'],
    title: 'TransactionPublic'
} as const;

export const TransactionUpdateSchema = {
    properties: {
        txn_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Txn Date'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TxnType'
                },
                {
                    type: 'null'
                }
            ]
        },
        amount: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Amount'
        },
        currency: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 10
                },
                {
                    type: 'null'
                }
            ],
            title: 'Currency'
        },
        merchant: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Merchant'
        },
        note: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        account_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Account Id'
        },
        category_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Category Id'
        },
        sprint_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sprint Id'
        }
    },
    type: 'object',
    title: 'TransactionUpdate'
} as const;

export const TransactionsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TransactionPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'TransactionsPublic'
} as const;

export const TxnTypeSchema = {
    type: 'string',
    enum: ['in', 'out'],
    title: 'TxnType'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;