// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AccountsReadAccountsData, AccountsReadAccountsResponse, AccountsCreateAccountData, AccountsCreateAccountResponse, AccountsUpdateAccountData, AccountsUpdateAccountResponse, AccountsReadAccountData, AccountsReadAccountResponse, AccountsDeleteAccountData, AccountsDeleteAccountResponse, AllocationRulesReadAllocationRulesData, AllocationRulesReadAllocationRulesResponse, AllocationRulesCreateAllocationRuleData, AllocationRulesCreateAllocationRuleResponse, AllocationRulesUpdateAllocationRuleData, AllocationRulesUpdateAllocationRuleResponse, AllocationRulesReadAllocationRuleData, AllocationRulesReadAllocationRuleResponse, AllocationRulesDeleteAllocationRuleData, AllocationRulesDeleteAllocationRuleResponse, CategoriesReadCategoriesData, CategoriesReadCategoriesResponse, CategoriesCreateCategoryData, CategoriesCreateCategoryResponse, CategoriesUpdateCategoryData, CategoriesUpdateCategoryResponse, CategoriesReadCategoryData, CategoriesReadCategoryResponse, CategoriesDeleteCategoryData, CategoriesDeleteCategoryResponse, GmailGetGmailConnectionsData, GmailGetGmailConnectionsResponse, GmailInitiateGmailConnectionResponse, GmailHandleGmailCallbackData, GmailHandleGmailCallbackResponse, GmailUpdateGmailConnectionData, GmailUpdateGmailConnectionResponse, GmailDeleteGmailConnectionData, GmailDeleteGmailConnectionResponse, GmailGetEmailTransactionsData, GmailGetEmailTransactionsResponse, GmailSyncEmailsData, GmailSyncEmailsResponse, GmailSyncEmailsBatchData, GmailSyncEmailsBatchResponse, GmailSyncEmailsByMonthData, GmailSyncEmailsByMonthResponse, GmailUpdateEmailTransactionData, GmailUpdateEmailTransactionResponse, GmailDeleteEmailTransactionData, GmailDeleteEmailTransactionResponse, GmailGetEmailTransactionsDashboardData, GmailGetEmailTransactionsDashboardResponse, GmailTriggerAutoSyncData, GmailTriggerAutoSyncResponse, GmailGetSchedulerStatusResponse, GmailStartSchedulerResponse, GmailStopSchedulerResponse, GmailTriggerSyncAllConnectionsData, GmailTriggerSyncAllConnectionsResponse, GmailCreateTransactionFromEmailData, GmailCreateTransactionFromEmailResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, MonthlyReportsGetMonthlyFinancialSummaryData, MonthlyReportsGetMonthlyFinancialSummaryResponse, MonthlyReportsGetMonthlyFinancialReportData, MonthlyReportsGetMonthlyFinancialReportResponse, MonthlyReportsGetMonthlyFinancialReportsRangeData, MonthlyReportsGetMonthlyFinancialReportsRangeResponse, PrivateCreateUserData, PrivateCreateUserResponse, RoadmapReadRoadmapsData, RoadmapReadRoadmapsResponse, RoadmapCreateRoadmapData, RoadmapCreateRoadmapResponse, RoadmapReadRoadmapData, RoadmapReadRoadmapResponse, RoadmapUpdateRoadmapData, RoadmapUpdateRoadmapResponse, RoadmapDeleteRoadmapData, RoadmapDeleteRoadmapResponse, RoadmapReadMilestonesData, RoadmapReadMilestonesResponse, RoadmapCreateMilestoneData, RoadmapCreateMilestoneResponse, RoadmapUpdateMilestoneData, RoadmapUpdateMilestoneResponse, RoadmapDeleteMilestoneData, RoadmapDeleteMilestoneResponse, TodosReadTodosData, TodosReadTodosResponse, TodosCreateTodoEndpointData, TodosCreateTodoEndpointResponse, TodosReadTodoData, TodosReadTodoResponse, TodosUpdateTodoEndpointData, TodosUpdateTodoEndpointResponse, TodosDeleteTodoEndpointData, TodosDeleteTodoEndpointResponse, TodosReadTodoChildrenData, TodosReadTodoChildrenResponse, TodosReadTodoParentData, TodosReadTodoParentResponse, TodosReadChecklistItemsData, TodosReadChecklistItemsResponse, TodosCreateChecklistItemEndpointData, TodosCreateChecklistItemEndpointResponse, TodosUpdateChecklistItemEndpointData, TodosUpdateChecklistItemEndpointResponse, TodosDeleteChecklistItemEndpointData, TodosDeleteChecklistItemEndpointResponse, TransactionsReadTransactionsData, TransactionsReadTransactionsResponse, TransactionsCreateTransactionData, TransactionsCreateTransactionResponse, TransactionsUpdateTransactionData, TransactionsUpdateTransactionResponse, TransactionsReadTransactionData, TransactionsReadTransactionResponse, TransactionsDeleteTransactionData, TransactionsDeleteTransactionResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AccountsService {
    /**
     * Read Accounts
     * Retrieve accounts for current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns AccountsPublic Successful Response
     * @throws ApiError
     */
    public static readAccounts(data: AccountsReadAccountsData = {}): CancelablePromise<AccountsReadAccountsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Account
     * Create new account.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static createAccount(data: AccountsCreateAccountData): CancelablePromise<AccountsCreateAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/accounts/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Account
     * Update an account.
     * @param data The data for the request.
     * @param data.accountId
     * @param data.requestBody
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static updateAccount(data: AccountsUpdateAccountData): CancelablePromise<AccountsUpdateAccountResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/accounts/{account_id}',
            path: {
                account_id: data.accountId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Account
     * Get a specific account by id.
     * @param data The data for the request.
     * @param data.accountId
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static readAccount(data: AccountsReadAccountData): CancelablePromise<AccountsReadAccountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts/{account_id}',
            path: {
                account_id: data.accountId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Account
     * Delete an account.
     * @param data The data for the request.
     * @param data.accountId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAccount(data: AccountsDeleteAccountData): CancelablePromise<AccountsDeleteAccountResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/accounts/{account_id}',
            path: {
                account_id: data.accountId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class AllocationRulesService {
    /**
     * Read Allocation Rules
     * Retrieve allocation rules for current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns AllocationRulesPublic Successful Response
     * @throws ApiError
     */
    public static readAllocationRules(data: AllocationRulesReadAllocationRulesData = {}): CancelablePromise<AllocationRulesReadAllocationRulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/allocation-rules/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Allocation Rule
     * Create new allocation rule.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AllocationRulePublic Successful Response
     * @throws ApiError
     */
    public static createAllocationRule(data: AllocationRulesCreateAllocationRuleData): CancelablePromise<AllocationRulesCreateAllocationRuleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/allocation-rules/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Allocation Rule
     * Update an allocation rule.
     * @param data The data for the request.
     * @param data.allocationRuleId
     * @param data.requestBody
     * @returns AllocationRulePublic Successful Response
     * @throws ApiError
     */
    public static updateAllocationRule(data: AllocationRulesUpdateAllocationRuleData): CancelablePromise<AllocationRulesUpdateAllocationRuleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/allocation-rules/{allocation_rule_id}',
            path: {
                allocation_rule_id: data.allocationRuleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Allocation Rule
     * Get a specific allocation rule by id.
     * @param data The data for the request.
     * @param data.allocationRuleId
     * @returns AllocationRulePublic Successful Response
     * @throws ApiError
     */
    public static readAllocationRule(data: AllocationRulesReadAllocationRuleData): CancelablePromise<AllocationRulesReadAllocationRuleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/allocation-rules/{allocation_rule_id}',
            path: {
                allocation_rule_id: data.allocationRuleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Allocation Rule
     * Delete an allocation rule.
     * @param data The data for the request.
     * @param data.allocationRuleId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAllocationRule(data: AllocationRulesDeleteAllocationRuleData): CancelablePromise<AllocationRulesDeleteAllocationRuleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/allocation-rules/{allocation_rule_id}',
            path: {
                allocation_rule_id: data.allocationRuleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class CategoriesService {
    /**
     * Read Categories
     * Retrieve categories for current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CategoriesPublic Successful Response
     * @throws ApiError
     */
    public static readCategories(data: CategoriesReadCategoriesData = {}): CancelablePromise<CategoriesReadCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/categories/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Category
     * Create new category.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CategoryPublic Successful Response
     * @throws ApiError
     */
    public static createCategory(data: CategoriesCreateCategoryData): CancelablePromise<CategoriesCreateCategoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/categories/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Category
     * Update a category.
     * @param data The data for the request.
     * @param data.categoryId
     * @param data.requestBody
     * @returns CategoryPublic Successful Response
     * @throws ApiError
     */
    public static updateCategory(data: CategoriesUpdateCategoryData): CancelablePromise<CategoriesUpdateCategoryResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/categories/{category_id}',
            path: {
                category_id: data.categoryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Category
     * Get a specific category by id.
     * @param data The data for the request.
     * @param data.categoryId
     * @returns CategoryPublic Successful Response
     * @throws ApiError
     */
    public static readCategory(data: CategoriesReadCategoryData): CancelablePromise<CategoriesReadCategoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/categories/{category_id}',
            path: {
                category_id: data.categoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Category
     * Delete a category.
     * @param data The data for the request.
     * @param data.categoryId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteCategory(data: CategoriesDeleteCategoryData): CancelablePromise<CategoriesDeleteCategoryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/categories/{category_id}',
            path: {
                category_id: data.categoryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class GmailService {
    /**
     * Get Gmail Connections
     * Get all Gmail connections for the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns GmailConnectionsPublic Successful Response
     * @throws ApiError
     */
    public static getGmailConnections(data: GmailGetGmailConnectionsData = {}): CancelablePromise<GmailGetGmailConnectionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/gmail/connections',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Initiate Gmail Connection
     * Initiate Gmail OAuth connection.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static initiateGmailConnection(): CancelablePromise<GmailInitiateGmailConnectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/connect'
        });
    }
    
    /**
     * Handle Gmail Callback
     * Handle Gmail OAuth callback and create connection.
     * @param data The data for the request.
     * @param data.code Authorization code from Google
     * @param data.state State parameter for security
     * @returns GmailConnectionPublic Successful Response
     * @throws ApiError
     */
    public static handleGmailCallback(data: GmailHandleGmailCallbackData): CancelablePromise<GmailHandleGmailCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/gmail/callback',
            query: {
                code: data.code,
                state: data.state
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Gmail Connection
     * Update a Gmail connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @param data.requestBody
     * @returns GmailConnectionPublic Successful Response
     * @throws ApiError
     */
    public static updateGmailConnection(data: GmailUpdateGmailConnectionData): CancelablePromise<GmailUpdateGmailConnectionResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/gmail/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Gmail Connection
     * Delete a Gmail connection.
     * @param data The data for the request.
     * @param data.connectionId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteGmailConnection(data: GmailDeleteGmailConnectionData): CancelablePromise<GmailDeleteGmailConnectionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/gmail/connections/{connection_id}',
            path: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Email Transactions
     * Get email transactions for a Gmail connection or all user's connections.
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID (optional, if not provided returns all user's connections)
     * @param data.skip
     * @param data.limit
     * @param data.status Filter by status (pending, processed, ignored)
     * @param data.sortBy Sort by: date_desc, amount_desc, amount_asc
     * @returns EmailTransactionsPublic Successful Response
     * @throws ApiError
     */
    public static getEmailTransactions(data: GmailGetEmailTransactionsData = {}): CancelablePromise<GmailGetEmailTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/gmail/email-transactions',
            query: {
                connection_id: data.connectionId,
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                sort_by: data.sortBy
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sync Emails
     * Sync ALL emails from Gmail and extract transaction information.
     *
     * This endpoint syncs ALL transaction emails without time limits using pagination.
     * It will fetch emails in batches to bypass Gmail API limits.
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID
     * @param data.batchSize Batch size for pagination (100-1000)
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static syncEmails(data: GmailSyncEmailsData): CancelablePromise<GmailSyncEmailsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/sync-emails',
            query: {
                connection_id: data.connectionId,
                batch_size: data.batchSize
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sync Emails Batch
     * Sync emails from Gmail in batches to avoid timeout.
     *
     * This endpoint syncs emails in smaller batches and returns a page token
     * for the next batch if there are more emails to sync.
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID
     * @param data.batchSize Batch size for pagination (100-1000)
     * @param data.pageToken Page token for pagination (optional)
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static syncEmailsBatch(data: GmailSyncEmailsBatchData): CancelablePromise<GmailSyncEmailsBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/sync-emails-batch',
            query: {
                connection_id: data.connectionId,
                batch_size: data.batchSize,
                page_token: data.pageToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sync Emails By Month
     * Sync emails from Gmail for a specific month and extract transaction information.
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID
     * @param data.year Year to sync (e.g., 2024)
     * @param data.month Month to sync (1-12)
     * @param data.maxResults Maximum number of emails to sync
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static syncEmailsByMonth(data: GmailSyncEmailsByMonthData): CancelablePromise<GmailSyncEmailsByMonthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/sync-emails-by-month',
            query: {
                connection_id: data.connectionId,
                year: data.year,
                month: data.month,
                max_results: data.maxResults
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Email Transaction
     * Update an email transaction.
     * @param data The data for the request.
     * @param data.transactionId
     * @param data.requestBody
     * @returns EmailTransactionPublic Successful Response
     * @throws ApiError
     */
    public static updateEmailTransaction(data: GmailUpdateEmailTransactionData): CancelablePromise<GmailUpdateEmailTransactionResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/gmail/email-transactions/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Email Transaction
     * Delete an email transaction.
     * @param data The data for the request.
     * @param data.transactionId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteEmailTransaction(data: GmailDeleteEmailTransactionData): CancelablePromise<GmailDeleteEmailTransactionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/gmail/email-transactions/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Email Transactions Dashboard
     * Email transaction dashboard data by category and monthly totals, filterable by month.
     *
     * If year and month are provided, results are restricted to that month; otherwise, all-time.
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID
     * @param data.year Year filter for monthly chart
     * @param data.month Month filter (1-12)
     * @returns EmailTxnDashboard Successful Response
     * @throws ApiError
     */
    public static getEmailTransactionsDashboard(data: GmailGetEmailTransactionsDashboardData): CancelablePromise<GmailGetEmailTransactionsDashboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/gmail/email-transactions/dashboard',
            query: {
                connection_id: data.connectionId,
                year: data.year,
                month: data.month
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Trigger Auto Sync
     * Trigger automatic sync for recent emails (last 24 hours).
     * @param data The data for the request.
     * @param data.connectionId Gmail connection ID
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerAutoSync(data: GmailTriggerAutoSyncData): CancelablePromise<GmailTriggerAutoSyncResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/auto-sync',
            query: {
                connection_id: data.connectionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Scheduler Status
     * Get the status of the Gmail sync scheduler.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSchedulerStatus(): CancelablePromise<GmailGetSchedulerStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/gmail/scheduler/status'
        });
    }
    
    /**
     * Start Scheduler
     * Start the Gmail sync scheduler (admin only).
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static startScheduler(): CancelablePromise<GmailStartSchedulerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/scheduler/start'
        });
    }
    
    /**
     * Stop Scheduler
     * Stop the Gmail sync scheduler (admin only).
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static stopScheduler(): CancelablePromise<GmailStopSchedulerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/scheduler/stop'
        });
    }
    
    /**
     * Trigger Sync All Connections
     * Trigger sync for all active Gmail connections (admin only).
     * @param data The data for the request.
     * @param data.days Number of days to sync back
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static triggerSyncAllConnections(data: GmailTriggerSyncAllConnectionsData = {}): CancelablePromise<GmailTriggerSyncAllConnectionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/scheduler/sync-all',
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Transaction From Email
     * Create a transaction from an email transaction.
     * @param data The data for the request.
     * @param data.emailTransactionId
     * @param data.accountId
     * @param data.transactionType Transaction type: 'income' or 'expense'
     * @param data.categoryId
     * @param data.sprintId
     * @param data.note
     * @returns TransactionPublic Successful Response
     * @throws ApiError
     */
    public static createTransactionFromEmail(data: GmailCreateTransactionFromEmailData): CancelablePromise<GmailCreateTransactionFromEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/gmail/email-transactions/{email_transaction_id}/create-transaction',
            path: {
                email_transaction_id: data.emailTransactionId
            },
            query: {
                account_id: data.accountId,
                category_id: data.categoryId,
                sprint_id: data.sprintId,
                note: data.note,
                transaction_type: data.transactionType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class MonthlyReportsService {
    /**
     * Get Monthly Financial Summary
     * Get monthly financial summary for a specific year and month.
     * @param data The data for the request.
     * @param data.year
     * @param data.month
     * @returns MonthlyFinancialSummary Successful Response
     * @throws ApiError
     */
    public static getMonthlyFinancialSummary(data: MonthlyReportsGetMonthlyFinancialSummaryData): CancelablePromise<MonthlyReportsGetMonthlyFinancialSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monthly-reports/summary/{year}/{month}',
            path: {
                year: data.year,
                month: data.month
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Monthly Financial Report
     * Get detailed monthly financial report for a specific year and month.
     * @param data The data for the request.
     * @param data.year
     * @param data.month
     * @returns MonthlyFinancialReport Successful Response
     * @throws ApiError
     */
    public static getMonthlyFinancialReport(data: MonthlyReportsGetMonthlyFinancialReportData): CancelablePromise<MonthlyReportsGetMonthlyFinancialReportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monthly-reports/detailed/{year}/{month}',
            path: {
                year: data.year,
                month: data.month
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Monthly Financial Reports Range
     * Get monthly financial reports for a range of months.
     * @param data The data for the request.
     * @param data.startYear Start year
     * @param data.startMonth Start month (1-12)
     * @param data.endYear End year
     * @param data.endMonth End month (1-12)
     * @returns MonthlyFinancialReports Successful Response
     * @throws ApiError
     */
    public static getMonthlyFinancialReportsRange(data: MonthlyReportsGetMonthlyFinancialReportsRangeData): CancelablePromise<MonthlyReportsGetMonthlyFinancialReportsRangeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monthly-reports/range',
            query: {
                start_year: data.startYear,
                start_month: data.startMonth,
                end_year: data.endYear,
                end_month: data.endMonth
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class RoadmapService {
    /**
     * Read Roadmaps
     * Retrieve roadmaps for current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns RoadmapsPublic Successful Response
     * @throws ApiError
     */
    public static readRoadmaps(data: RoadmapReadRoadmapsData = {}): CancelablePromise<RoadmapReadRoadmapsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roadmap/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Roadmap
     * Create new roadmap.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns RoadmapPublic Successful Response
     * @throws ApiError
     */
    public static createRoadmap(data: RoadmapCreateRoadmapData): CancelablePromise<RoadmapCreateRoadmapResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/roadmap/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Roadmap
     * Get roadmap by ID.
     * @param data The data for the request.
     * @param data.roadmapId
     * @returns RoadmapPublic Successful Response
     * @throws ApiError
     */
    public static readRoadmap(data: RoadmapReadRoadmapData): CancelablePromise<RoadmapReadRoadmapResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roadmap/{roadmap_id}',
            path: {
                roadmap_id: data.roadmapId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Roadmap
     * Update a roadmap.
     * @param data The data for the request.
     * @param data.roadmapId
     * @param data.requestBody
     * @returns RoadmapPublic Successful Response
     * @throws ApiError
     */
    public static updateRoadmap(data: RoadmapUpdateRoadmapData): CancelablePromise<RoadmapUpdateRoadmapResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/roadmap/{roadmap_id}',
            path: {
                roadmap_id: data.roadmapId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Roadmap
     * Delete a roadmap.
     * @param data The data for the request.
     * @param data.roadmapId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteRoadmap(data: RoadmapDeleteRoadmapData): CancelablePromise<RoadmapDeleteRoadmapResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/roadmap/{roadmap_id}',
            path: {
                roadmap_id: data.roadmapId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Milestones
     * Retrieve milestones for a roadmap.
     * @param data The data for the request.
     * @param data.roadmapId
     * @param data.skip
     * @param data.limit
     * @returns RoadmapMilestonesPublic Successful Response
     * @throws ApiError
     */
    public static readMilestones(data: RoadmapReadMilestonesData): CancelablePromise<RoadmapReadMilestonesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/roadmap/{roadmap_id}/milestones',
            path: {
                roadmap_id: data.roadmapId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Milestone
     * Create new milestone for a roadmap.
     * @param data The data for the request.
     * @param data.roadmapId
     * @param data.requestBody
     * @returns RoadmapMilestonePublic Successful Response
     * @throws ApiError
     */
    public static createMilestone(data: RoadmapCreateMilestoneData): CancelablePromise<RoadmapCreateMilestoneResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/roadmap/{roadmap_id}/milestones',
            path: {
                roadmap_id: data.roadmapId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Milestone
     * Update a milestone.
     * @param data The data for the request.
     * @param data.roadmapId
     * @param data.milestoneId
     * @param data.requestBody
     * @returns RoadmapMilestonePublic Successful Response
     * @throws ApiError
     */
    public static updateMilestone(data: RoadmapUpdateMilestoneData): CancelablePromise<RoadmapUpdateMilestoneResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/roadmap/{roadmap_id}/milestones/{milestone_id}',
            path: {
                roadmap_id: data.roadmapId,
                milestone_id: data.milestoneId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Milestone
     * Delete a milestone.
     * @param data The data for the request.
     * @param data.roadmapId
     * @param data.milestoneId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteMilestone(data: RoadmapDeleteMilestoneData): CancelablePromise<RoadmapDeleteMilestoneResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/roadmap/{roadmap_id}/milestones/{milestone_id}',
            path: {
                roadmap_id: data.roadmapId,
                milestone_id: data.milestoneId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class TodosService {
    /**
     * Read Todos
     * Retrieve todos with optional search functionality.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search
     * @returns TodosPublic Successful Response
     * @throws ApiError
     */
    public static readTodos(data: TodosReadTodosData = {}): CancelablePromise<TodosReadTodosResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/todos/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Todo Endpoint
     * Create new todo.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TodoPublic Successful Response
     * @throws ApiError
     */
    public static createTodoEndpoint(data: TodosCreateTodoEndpointData): CancelablePromise<TodosCreateTodoEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/todos/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Todo
     * Get todo by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns TodoPublic Successful Response
     * @throws ApiError
     */
    public static readTodo(data: TodosReadTodoData): CancelablePromise<TodosReadTodoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/todos/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Todo Endpoint
     * Update a todo.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns TodoPublic Successful Response
     * @throws ApiError
     */
    public static updateTodoEndpoint(data: TodosUpdateTodoEndpointData): CancelablePromise<TodosUpdateTodoEndpointResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/todos/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Todo Endpoint
     * Delete a todo.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTodoEndpoint(data: TodosDeleteTodoEndpointData): CancelablePromise<TodosDeleteTodoEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/todos/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Todo Children
     * Get children (subitems) of a todo.
     * @param data The data for the request.
     * @param data.id
     * @returns TodosPublic Successful Response
     * @throws ApiError
     */
    public static readTodoChildren(data: TodosReadTodoChildrenData): CancelablePromise<TodosReadTodoChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/todos/{id}/children',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Todo Parent
     * Get parent of a todo, if any.
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readTodoParent(data: TodosReadTodoParentData): CancelablePromise<TodosReadTodoParentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/todos/{id}/parent',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Checklist Items
     * Get checklist items for a todo.
     * @param data The data for the request.
     * @param data.todoId
     * @returns ChecklistItemsPublic Successful Response
     * @throws ApiError
     */
    public static readChecklistItems(data: TodosReadChecklistItemsData): CancelablePromise<TodosReadChecklistItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/todos/{todo_id}/checklist',
            path: {
                todo_id: data.todoId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Checklist Item Endpoint
     * Create new checklist item for a todo.
     * @param data The data for the request.
     * @param data.todoId
     * @param data.requestBody
     * @returns ChecklistItemPublic Successful Response
     * @throws ApiError
     */
    public static createChecklistItemEndpoint(data: TodosCreateChecklistItemEndpointData): CancelablePromise<TodosCreateChecklistItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/todos/{todo_id}/checklist',
            path: {
                todo_id: data.todoId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Checklist Item Endpoint
     * Update a checklist item.
     * @param data The data for the request.
     * @param data.checklistItemId
     * @param data.requestBody
     * @returns ChecklistItemPublic Successful Response
     * @throws ApiError
     */
    public static updateChecklistItemEndpoint(data: TodosUpdateChecklistItemEndpointData): CancelablePromise<TodosUpdateChecklistItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/todos/checklist/{checklist_item_id}',
            path: {
                checklist_item_id: data.checklistItemId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Checklist Item Endpoint
     * Delete a checklist item.
     * @param data The data for the request.
     * @param data.checklistItemId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteChecklistItemEndpoint(data: TodosDeleteChecklistItemEndpointData): CancelablePromise<TodosDeleteChecklistItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/todos/checklist/{checklist_item_id}',
            path: {
                checklist_item_id: data.checklistItemId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class TransactionsService {
    /**
     * Read Transactions
     * Retrieve transactions for current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns TransactionsPublic Successful Response
     * @throws ApiError
     */
    public static readTransactions(data: TransactionsReadTransactionsData = {}): CancelablePromise<TransactionsReadTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactions/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Transaction
     * Create new transaction.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TransactionPublic Successful Response
     * @throws ApiError
     */
    public static createTransaction(data: TransactionsCreateTransactionData): CancelablePromise<TransactionsCreateTransactionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/transactions/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Transaction
     * Update a transaction.
     * @param data The data for the request.
     * @param data.transactionId
     * @param data.requestBody
     * @returns TransactionPublic Successful Response
     * @throws ApiError
     */
    public static updateTransaction(data: TransactionsUpdateTransactionData): CancelablePromise<TransactionsUpdateTransactionResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/transactions/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Transaction
     * Get a specific transaction by id.
     * @param data The data for the request.
     * @param data.transactionId
     * @returns TransactionPublic Successful Response
     * @throws ApiError
     */
    public static readTransaction(data: TransactionsReadTransactionData): CancelablePromise<TransactionsReadTransactionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/transactions/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Transaction
     * Delete a transaction.
     * @param data The data for the request.
     * @param data.transactionId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTransaction(data: TransactionsDeleteTransactionData): CancelablePromise<TransactionsDeleteTransactionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/transactions/{transaction_id}',
            path: {
                transaction_id: data.transactionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
}