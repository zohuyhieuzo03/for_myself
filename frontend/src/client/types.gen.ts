// This file is auto-generated by @hey-api/openapi-ts

export type AccountCreate = {
    name: string;
    type?: AccountType;
    currency?: string;
    is_active?: boolean;
};

export type AccountPublic = {
    name: string;
    type?: AccountType;
    currency?: string;
    is_active?: boolean;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

export type AccountsPublic = {
    data: Array<AccountPublic>;
    count: number;
};

export type AccountType = 'cash' | 'bank' | 'ewallet' | 'investment' | 'credit_card' | 'other';

export type AccountUpdate = {
    name?: (string | null);
    type?: (AccountType | null);
    currency?: (string | null);
    is_active?: (boolean | null);
};

export type AllocationRuleCreate = {
    grp: CategoryGroup;
    percent: number;
};

export type AllocationRulePublic = {
    grp: CategoryGroup;
    percent: number;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

export type AllocationRulesPublic = {
    data: Array<AllocationRulePublic>;
    count: number;
};

export type AllocationRuleUpdate = {
    grp?: (CategoryGroup | null);
    percent?: (number | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type CategoriesPublic = {
    data: Array<CategoryPublic>;
    count: number;
};

export type CategoryCreate = {
    name: string;
    grp: CategoryGroup;
    is_envelope?: boolean;
};

export type CategoryGroup = 'needs' | 'wants' | 'savings_debt' | 'income';

export type CategoryPublic = {
    name: string;
    grp: CategoryGroup;
    is_envelope?: boolean;
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

export type CategoryUpdate = {
    name?: (string | null);
    grp?: (CategoryGroup | null);
    is_envelope?: (boolean | null);
};

export type ChecklistItemCreate = {
    title: string;
    is_completed?: boolean;
    order_index?: number;
};

export type ChecklistItemPublic = {
    title: string;
    is_completed?: boolean;
    order_index?: number;
    id: string;
    todo_id: string;
    created_at: string;
    updated_at: string;
};

export type ChecklistItemsPublic = {
    data: Array<ChecklistItemPublic>;
    count: number;
};

export type ChecklistItemUpdate = {
    title?: (string | null);
    is_completed?: (boolean | null);
    order_index?: (number | null);
};

export type EmailTransactionPublic = {
    email_id: string;
    subject: string;
    sender: string;
    received_at: string;
    amount?: (number | null);
    merchant?: (string | null);
    account_number?: (string | null);
    transaction_type?: (string | null);
    status?: EmailTransactionStatus;
    raw_content?: (string | null);
    id: string;
    gmail_connection_id: string;
    linked_transaction_id: (string | null);
    category_id: (string | null);
    category_name?: (string | null);
    created_at: string;
    updated_at: string;
};

export type EmailTransactionsPublic = {
    data: Array<EmailTransactionPublic>;
    count: number;
};

export type EmailTransactionStatus = 'pending' | 'processed' | 'ignored';

export type EmailTransactionUpdate = {
    amount?: (number | null);
    merchant?: (string | null);
    account_number?: (string | null);
    transaction_type?: (string | null);
    status?: (EmailTransactionStatus | null);
    linked_transaction_id?: (string | null);
    category_id?: (string | null);
};

export type EmailTxnCategoryAmount = {
    category_id?: (string | null);
    category_name?: (string | null);
    total_amount?: number;
};

export type EmailTxnDashboard = {
    by_category?: Array<EmailTxnCategoryAmount>;
    monthly?: Array<EmailTxnMonthlyAmount>;
};

export type EmailTxnMonthlyAmount = {
    year: number;
    month: number;
    total_amount?: number;
};

export type GmailConnectionPublic = {
    gmail_email: string;
    is_active?: boolean;
    id: string;
    user_id: string;
    expires_at: (string | null);
    last_sync_at: (string | null);
    created_at: string;
    updated_at: string;
};

export type GmailConnectionsPublic = {
    data: Array<GmailConnectionPublic>;
    count: number;
};

export type GmailConnectionUpdate = {
    is_active?: (boolean | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
};

export type Message = {
    message: string;
};

export type MilestoneCreate = {
    title: string;
    description?: (string | null);
    status?: MilestoneStatus;
    target_date?: (string | null);
    completed_date?: (string | null);
};

export type MilestoneReorderRequest = {
    milestone_ids: Array<(string)>;
};

export type MilestoneStatus = 'pending' | 'in_progress' | 'completed' | 'blocked';

export type MilestoneUpdate = {
    title?: (string | null);
    description?: (string | null);
    status?: (MilestoneStatus | null);
    target_date?: (string | null);
    completed_date?: (string | null);
};

export type MonthlyFinancialReport = {
    year: number;
    month: number;
    total_expenses?: number;
    net_amount?: number;
    expense_count?: number;
    transactions?: Array<TransactionPublic>;
    allocation_rules?: Array<AllocationRulePublic>;
};

export type MonthlyFinancialReports = {
    data: Array<MonthlyFinancialReport>;
    count: number;
};

export type MonthlyFinancialSummary = {
    year: number;
    month: number;
    total_expenses?: number;
    net_amount?: number;
    expense_count?: number;
    category_breakdown?: {
        [key: string]: (number);
    };
    account_breakdown?: {
        [key: string]: (number);
    };
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type ResourceCreate = {
    title: string;
    description?: (string | null);
    url?: (string | null);
    milestone_id?: (string | null);
};

export type ResourcePublic = {
    title: string;
    description?: (string | null);
    url?: (string | null);
    id: string;
    user_id: string;
    milestone_id: (string | null);
    created_at: string;
    updated_at: string;
    subjects?: Array<ResourceSubjectPublic>;
};

export type ResourcesPublic = {
    data: Array<ResourcePublic>;
    count: number;
};

export type ResourceSubjectCreate = {
    title: string;
    description?: (string | null);
    is_completed?: boolean;
    order_index?: number;
};

export type ResourceSubjectPublic = {
    title: string;
    description?: (string | null);
    is_completed?: boolean;
    order_index?: number;
    id: string;
    resource_id: string;
    created_at: string;
    updated_at: string;
};

export type ResourceSubjectReorderRequest = {
    subject_ids: Array<(string)>;
};

export type ResourceSubjectsPublic = {
    data: Array<ResourceSubjectPublic>;
    count: number;
};

export type ResourceSubjectUpdate = {
    title?: (string | null);
    description?: (string | null);
    is_completed?: (boolean | null);
    order_index?: (number | null);
};

export type ResourceUpdate = {
    title?: (string | null);
    description?: (string | null);
    url?: (string | null);
};

export type RoadmapCreate = {
    title: string;
    description?: (string | null);
    status?: RoadmapStatus;
    priority?: RoadmapPriority;
    start_date?: (string | null);
    target_date?: (string | null);
    completed_date?: (string | null);
};

export type RoadmapMilestonePublic = {
    title: string;
    description?: (string | null);
    status?: MilestoneStatus;
    target_date?: (string | null);
    completed_date?: (string | null);
    id: string;
    roadmap_id: string;
    created_at: string;
    updated_at: string;
    todos_count?: (number | null);
};

export type RoadmapMilestonesPublic = {
    data: Array<RoadmapMilestonePublic>;
    count: number;
};

export type RoadmapPriority = 'low' | 'medium' | 'high' | 'critical';

export type RoadmapPublic = {
    title: string;
    description?: (string | null);
    status?: RoadmapStatus;
    priority?: RoadmapPriority;
    start_date?: (string | null);
    target_date?: (string | null);
    completed_date?: (string | null);
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
    milestones?: Array<RoadmapMilestonePublic>;
    progress_percentage?: number;
};

export type RoadmapsPublic = {
    data: Array<RoadmapPublic>;
    count: number;
};

export type RoadmapStatus = 'planning' | 'in_progress' | 'completed' | 'on_hold' | 'cancelled';

export type RoadmapUpdate = {
    title?: (string | null);
    description?: (string | null);
    status?: (RoadmapStatus | null);
    priority?: (RoadmapPriority | null);
    start_date?: (string | null);
    target_date?: (string | null);
    completed_date?: (string | null);
};

export type TodoCreate = {
    title: string;
    description?: (string | null);
    status?: TodoStatus;
    estimate_minutes?: (number | null);
    priority?: TodoPriority;
    type?: TodoType;
    scheduled_date?: (string | null);
    parent_id?: (string | null);
    milestone_id?: (string | null);
};

export type TodoPriority = 'low' | 'medium' | 'high' | 'urgent';

export type TodoPublic = {
    title: string;
    description?: (string | null);
    status?: TodoStatus;
    estimate_minutes?: (number | null);
    priority?: TodoPriority;
    type?: TodoType;
    scheduled_date?: (string | null);
    id: string;
    owner_id: string;
    parent_id?: (string | null);
    created_at: string;
    updated_at: string;
    checklist_items?: Array<ChecklistItemPublic>;
};

export type TodosPublic = {
    data: Array<TodoPublic>;
    count: number;
};

export type TodoStatus = 'backlog' | 'todo' | 'doing' | 'planning' | 'done' | 'archived';

export type TodoType = 'work' | 'learning' | 'daily_life' | 'task' | 'personal' | 'health' | 'finance' | 'other';

export type TodoUpdate = {
    title?: (string | null);
    description?: (string | null);
    status?: (TodoStatus | null);
    estimate_minutes?: (number | null);
    priority?: (TodoPriority | null);
    type?: (TodoType | null);
    parent_id?: (string | null);
    milestone_id?: (string | null);
    scheduled_date?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TransactionCreate = {
    txn_date: string;
    type: TxnType;
    amount: number;
    currency?: string;
    merchant?: (string | null);
    note?: (string | null);
    account_id: string;
    category_id?: (string | null);
};

export type TransactionPublic = {
    txn_date: string;
    type: TxnType;
    amount: number;
    currency?: string;
    merchant?: (string | null);
    note?: (string | null);
    id: string;
    user_id: string;
    account_id: string;
    category_id: (string | null);
    category_name?: (string | null);
    created_at: string;
    updated_at: string;
};

export type TransactionsPublic = {
    data: Array<TransactionPublic>;
    count: number;
};

export type TransactionUpdate = {
    txn_date?: (string | null);
    type?: (TxnType | null);
    amount?: (number | null);
    currency?: (string | null);
    merchant?: (string | null);
    note?: (string | null);
    account_id?: (string | null);
    category_id?: (string | null);
};

export type TxnType = 'out' | 'in';

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    password?: (string | null);
    is_superuser?: (boolean | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AccountsReadAccountsData = {
    limit?: number;
    skip?: number;
};

export type AccountsReadAccountsResponse = (AccountsPublic);

export type AccountsCreateAccountData = {
    requestBody: AccountCreate;
};

export type AccountsCreateAccountResponse = (AccountPublic);

export type AccountsUpdateAccountData = {
    accountId: string;
    requestBody: AccountUpdate;
};

export type AccountsUpdateAccountResponse = (AccountPublic);

export type AccountsReadAccountData = {
    accountId: string;
};

export type AccountsReadAccountResponse = (AccountPublic);

export type AccountsDeleteAccountData = {
    accountId: string;
};

export type AccountsDeleteAccountResponse = (Message);

export type AllocationRulesReadAllocationRulesData = {
    limit?: number;
    skip?: number;
};

export type AllocationRulesReadAllocationRulesResponse = (AllocationRulesPublic);

export type AllocationRulesCreateAllocationRuleData = {
    requestBody: AllocationRuleCreate;
};

export type AllocationRulesCreateAllocationRuleResponse = (AllocationRulePublic);

export type AllocationRulesUpdateAllocationRuleData = {
    allocationRuleId: string;
    requestBody: AllocationRuleUpdate;
};

export type AllocationRulesUpdateAllocationRuleResponse = (AllocationRulePublic);

export type AllocationRulesReadAllocationRuleData = {
    allocationRuleId: string;
};

export type AllocationRulesReadAllocationRuleResponse = (AllocationRulePublic);

export type AllocationRulesDeleteAllocationRuleData = {
    allocationRuleId: string;
};

export type AllocationRulesDeleteAllocationRuleResponse = (Message);

export type CategoriesReadCategoriesData = {
    limit?: number;
    skip?: number;
};

export type CategoriesReadCategoriesResponse = (CategoriesPublic);

export type CategoriesCreateCategoryData = {
    requestBody: CategoryCreate;
};

export type CategoriesCreateCategoryResponse = (CategoryPublic);

export type CategoriesUpdateCategoryData = {
    categoryId: string;
    requestBody: CategoryUpdate;
};

export type CategoriesUpdateCategoryResponse = (CategoryPublic);

export type CategoriesReadCategoryData = {
    categoryId: string;
};

export type CategoriesReadCategoryResponse = (CategoryPublic);

export type CategoriesDeleteCategoryData = {
    categoryId: string;
};

export type CategoriesDeleteCategoryResponse = (Message);

export type GmailGetGmailConnectionsData = {
    limit?: number;
    skip?: number;
};

export type GmailGetGmailConnectionsResponse = (GmailConnectionsPublic);

export type GmailInitiateGmailConnectionResponse = ({
    [key: string]: unknown;
});

export type GmailHandleGmailCallbackData = {
    /**
     * Authorization code from Google
     */
    code: string;
    /**
     * State parameter for security
     */
    state: string;
};

export type GmailHandleGmailCallbackResponse = (GmailConnectionPublic);

export type GmailReconnectGmailConnectionData = {
    connectionId: string;
};

export type GmailReconnectGmailConnectionResponse = ({
    [key: string]: unknown;
});

export type GmailUpdateGmailConnectionData = {
    connectionId: string;
    requestBody: GmailConnectionUpdate;
};

export type GmailUpdateGmailConnectionResponse = (GmailConnectionPublic);

export type GmailDeleteGmailConnectionData = {
    connectionId: string;
};

export type GmailDeleteGmailConnectionResponse = (Message);

export type GmailGetEmailTransactionsData = {
    /**
     * Gmail connection ID (optional, if not provided returns all user's connections)
     */
    connectionId?: string;
    limit?: number;
    skip?: number;
    /**
     * Sort by: date_desc, amount_desc, amount_asc
     */
    sortBy?: string;
    /**
     * Filter by status (pending, processed, ignored)
     */
    status?: string;
};

export type GmailGetEmailTransactionsResponse = (EmailTransactionsPublic);

export type GmailSyncEmailsData = {
    /**
     * Batch size for pagination (100-1000)
     */
    batchSize?: number;
    /**
     * Gmail connection ID
     */
    connectionId: string;
};

export type GmailSyncEmailsResponse = (Message);

export type GmailSyncEmailsBatchData = {
    /**
     * Batch size for pagination (100-1000)
     */
    batchSize?: number;
    /**
     * Gmail connection ID
     */
    connectionId: string;
    /**
     * Page token for pagination (optional)
     */
    pageToken?: string;
};

export type GmailSyncEmailsBatchResponse = (Message);

export type GmailSyncEmailsByMonthData = {
    /**
     * Gmail connection ID
     */
    connectionId: string;
    /**
     * Maximum number of emails to sync
     */
    maxResults?: number;
    /**
     * Month to sync (1-12)
     */
    month: number;
    /**
     * Year to sync (e.g., 2024)
     */
    year: number;
};

export type GmailSyncEmailsByMonthResponse = (Message);

export type GmailUpdateEmailTransactionData = {
    requestBody: EmailTransactionUpdate;
    transactionId: string;
};

export type GmailUpdateEmailTransactionResponse = (EmailTransactionPublic);

export type GmailDeleteEmailTransactionData = {
    transactionId: string;
};

export type GmailDeleteEmailTransactionResponse = (Message);

export type GmailGetEmailTransactionsDashboardData = {
    /**
     * Gmail connection ID
     */
    connectionId: string;
    /**
     * Month filter (1-12)
     */
    month?: (number | null);
    /**
     * Year filter for monthly chart
     */
    year?: (number | null);
};

export type GmailGetEmailTransactionsDashboardResponse = (EmailTxnDashboard);

export type GmailTriggerAutoSyncData = {
    /**
     * Gmail connection ID
     */
    connectionId: string;
};

export type GmailTriggerAutoSyncResponse = (Message);

export type GmailGetSchedulerStatusResponse = ({
    [key: string]: unknown;
});

export type GmailStartSchedulerResponse = (Message);

export type GmailStopSchedulerResponse = (Message);

export type GmailTriggerSyncAllConnectionsData = {
    /**
     * Number of days to sync back
     */
    days?: number;
};

export type GmailTriggerSyncAllConnectionsResponse = (Message);

export type GmailCreateTransactionFromEmailData = {
    accountId: string;
    categoryId?: (string | null);
    emailTransactionId: string;
    note?: (string | null);
    sprintId?: (string | null);
    /**
     * Transaction type: 'income' or 'expense'
     */
    transactionType: string;
};

export type GmailCreateTransactionFromEmailResponse = (TransactionPublic);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type MonthlyReportsGetMonthlyFinancialSummaryData = {
    month: number;
    year: number;
};

export type MonthlyReportsGetMonthlyFinancialSummaryResponse = (MonthlyFinancialSummary);

export type MonthlyReportsGetMonthlyFinancialReportData = {
    month: number;
    year: number;
};

export type MonthlyReportsGetMonthlyFinancialReportResponse = (MonthlyFinancialReport);

export type MonthlyReportsGetMonthlyFinancialReportsRangeData = {
    /**
     * End month (1-12)
     */
    endMonth: number;
    /**
     * End year
     */
    endYear: number;
    /**
     * Start month (1-12)
     */
    startMonth: number;
    /**
     * Start year
     */
    startYear: number;
};

export type MonthlyReportsGetMonthlyFinancialReportsRangeResponse = (MonthlyFinancialReports);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type ResourcesCreateResourceData = {
    requestBody: ResourceCreate;
};

export type ResourcesCreateResourceResponse = (ResourcePublic);

export type ResourcesReadResourcesData = {
    limit?: number;
    milestoneId?: (string | null);
    skip?: number;
};

export type ResourcesReadResourcesResponse = (ResourcesPublic);

export type ResourcesReadResourceData = {
    resourceId: string;
};

export type ResourcesReadResourceResponse = (ResourcePublic);

export type ResourcesUpdateResourceData = {
    requestBody: ResourceUpdate;
    resourceId: string;
};

export type ResourcesUpdateResourceResponse = (ResourcePublic);

export type ResourcesDeleteResourceData = {
    resourceId: string;
};

export type ResourcesDeleteResourceResponse = (unknown);

export type ResourcesCreateResourceSubjectData = {
    requestBody: ResourceSubjectCreate;
    resourceId: string;
};

export type ResourcesCreateResourceSubjectResponse = (ResourceSubjectPublic);

export type ResourcesReadResourceSubjectsData = {
    limit?: number;
    resourceId: string;
    skip?: number;
};

export type ResourcesReadResourceSubjectsResponse = (ResourceSubjectsPublic);

export type ResourcesReadResourceSubjectData = {
    subjectId: string;
};

export type ResourcesReadResourceSubjectResponse = (ResourceSubjectPublic);

export type ResourcesUpdateResourceSubjectData = {
    requestBody: ResourceSubjectUpdate;
    subjectId: string;
};

export type ResourcesUpdateResourceSubjectResponse = (ResourceSubjectPublic);

export type ResourcesDeleteResourceSubjectData = {
    subjectId: string;
};

export type ResourcesDeleteResourceSubjectResponse = (unknown);

export type ResourcesReorderResourceSubjectsData = {
    requestBody: ResourceSubjectReorderRequest;
    resourceId: string;
};

export type ResourcesReorderResourceSubjectsResponse = (ResourceSubjectsPublic);

export type RoadmapReadRoadmapsData = {
    limit?: number;
    skip?: number;
};

export type RoadmapReadRoadmapsResponse = (RoadmapsPublic);

export type RoadmapCreateRoadmapData = {
    requestBody: RoadmapCreate;
};

export type RoadmapCreateRoadmapResponse = (RoadmapPublic);

export type RoadmapReadRoadmapData = {
    roadmapId: string;
};

export type RoadmapReadRoadmapResponse = (RoadmapPublic);

export type RoadmapUpdateRoadmapData = {
    requestBody: RoadmapUpdate;
    roadmapId: string;
};

export type RoadmapUpdateRoadmapResponse = (RoadmapPublic);

export type RoadmapDeleteRoadmapData = {
    roadmapId: string;
};

export type RoadmapDeleteRoadmapResponse = (Message);

export type RoadmapReadMilestonesData = {
    limit?: number;
    roadmapId: string;
    skip?: number;
};

export type RoadmapReadMilestonesResponse = (RoadmapMilestonesPublic);

export type RoadmapCreateMilestoneData = {
    requestBody: MilestoneCreate;
    roadmapId: string;
};

export type RoadmapCreateMilestoneResponse = (RoadmapMilestonePublic);

export type RoadmapReorderMilestonesData = {
    requestBody: MilestoneReorderRequest;
    roadmapId: string;
};

export type RoadmapReorderMilestonesResponse = (RoadmapMilestonesPublic);

export type RoadmapUpdateMilestoneData = {
    milestoneId: string;
    requestBody: MilestoneUpdate;
    roadmapId: string;
};

export type RoadmapUpdateMilestoneResponse = (RoadmapMilestonePublic);

export type RoadmapDeleteMilestoneData = {
    milestoneId: string;
    roadmapId: string;
};

export type RoadmapDeleteMilestoneResponse = (Message);

export type RoadmapReadMilestoneTodosData = {
    limit?: number;
    milestoneId: string;
    roadmapId: string;
    skip?: number;
};

export type RoadmapReadMilestoneTodosResponse = (TodosPublic);

export type RoadmapCreateMilestoneTodoData = {
    milestoneId: string;
    requestBody: TodoCreate;
    roadmapId: string;
};

export type RoadmapCreateMilestoneTodoResponse = (TodoPublic);

export type TodosReadTodosData = {
    limit?: number;
    search?: (string | null);
    skip?: number;
};

export type TodosReadTodosResponse = (TodosPublic);

export type TodosCreateTodoEndpointData = {
    requestBody: TodoCreate;
};

export type TodosCreateTodoEndpointResponse = (TodoPublic);

export type TodosReadOverdueTodosResponse = (TodosPublic);

export type TodosReadTodoData = {
    id: string;
};

export type TodosReadTodoResponse = (TodoPublic);

export type TodosUpdateTodoEndpointData = {
    id: string;
    requestBody: TodoUpdate;
};

export type TodosUpdateTodoEndpointResponse = (TodoPublic);

export type TodosDeleteTodoEndpointData = {
    id: string;
};

export type TodosDeleteTodoEndpointResponse = (Message);

export type TodosReadTodoChildrenData = {
    id: string;
};

export type TodosReadTodoChildrenResponse = (TodosPublic);

export type TodosReadTodoParentData = {
    id: string;
};

export type TodosReadTodoParentResponse = ((TodoPublic | null));

export type TodosReadTodoMilestoneData = {
    id: string;
};

export type TodosReadTodoMilestoneResponse = (unknown);

export type TodosReadChecklistItemsData = {
    todoId: string;
};

export type TodosReadChecklistItemsResponse = (ChecklistItemsPublic);

export type TodosCreateChecklistItemEndpointData = {
    requestBody: ChecklistItemCreate;
    todoId: string;
};

export type TodosCreateChecklistItemEndpointResponse = (ChecklistItemPublic);

export type TodosUpdateChecklistItemEndpointData = {
    checklistItemId: string;
    requestBody: ChecklistItemUpdate;
};

export type TodosUpdateChecklistItemEndpointResponse = (ChecklistItemPublic);

export type TodosDeleteChecklistItemEndpointData = {
    checklistItemId: string;
};

export type TodosDeleteChecklistItemEndpointResponse = (Message);

export type TodosReadDailyTodosData = {
    date: string;
};

export type TodosReadDailyTodosResponse = (TodosPublic);

export type TodosScheduleTodoEndpointData = {
    date: string;
    id: string;
};

export type TodosScheduleTodoEndpointResponse = (TodoPublic);

export type TodosRolloverTodosEndpointResponse = (TodosPublic);

export type TodosGetScheduleSummaryData = {
    days?: number;
};

export type TodosGetScheduleSummaryResponse = (unknown);

export type TransactionsReadTransactionsData = {
    limit?: number;
    skip?: number;
};

export type TransactionsReadTransactionsResponse = (TransactionsPublic);

export type TransactionsCreateTransactionData = {
    requestBody: TransactionCreate;
};

export type TransactionsCreateTransactionResponse = (TransactionPublic);

export type TransactionsUpdateTransactionData = {
    requestBody: TransactionUpdate;
    transactionId: string;
};

export type TransactionsUpdateTransactionResponse = (TransactionPublic);

export type TransactionsReadTransactionData = {
    transactionId: string;
};

export type TransactionsReadTransactionResponse = (TransactionPublic);

export type TransactionsDeleteTransactionData = {
    transactionId: string;
};

export type TransactionsDeleteTransactionResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);